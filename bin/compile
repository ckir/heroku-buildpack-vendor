#!/bin/bash

# fail fast
set -o errexit
set -o nounset
set -o pipefail

indent() {
  sed -u 's/^/       /'
}

scriptname=$(basename $0)
case $# in
  2) :;;
  *) echo "$scriptname: usage: $scriptname BUILD_DIR CACHE_DIR" >&2; exit 2;;
esac

build_dir="$1"
cache_dir="$2"
script_dir=$(dirname $0)/../scripts

ccache=$build_dir/.heroku/vendor/bin/ccache
ccache_version=3.1.9
ccache_dir=$cache_dir/ccache

# Set up ccache
if [ -f $cache_dir/vendor/bin/ccache ]
then
  mkdir -p $build_dir/.heroku/vendor/bin
  cp -p $cache_dir/vendor/bin/ccache $build_dir/.heroku/vendor/bin/ccache
else
  echo "-----> Building ccache-$ccache_version"
  $script_dir/ccache $build_dir $cache_dir $ccache_version
  mkdir -p $cache_dir/vendor/bin
  cp -p $build_dir/.heroku/vendor/bin/ccache $cache_dir/vendor/bin/ccache
fi

mkdir -p $ccache_dir
export CCACHE_DIR=$ccache_dir
export CC="$ccache gcc"
export CXX="$ccache g++"

export PATH=$build_dir/.heroku/vendor/bin:$PATH
export CPPFLAGS=-I$build_dir/.heroku/vendor/include
export LDFLAGS=-L$build_dir/.heroku/vendor/lib
export LD_LIBRARY_PATH=$build_dir/.heroku/vendor/lib
export PKG_CONFIG_PATH=$build_dir/.heroku/vendor/lib/pkg-config

while read -r line
do
  package=$(echo $line | awk '{print $1}')
  version=$(echo $line | awk '{print $2}')
  echo "-----> Building $package-$version"
  if [ ! -f $script_dir/$package ]
  then
    echo "Error: scripts/$package not found in buildpack" | indent
    exit 1
  fi
  $script_dir/$package $build_dir $cache_dir $version | indent
done < $build_dir/.vendor-packages

#echo "-----> Pruning directories outside .heroku"
#rm -f $build_dir/.vendor-packages
#find $build_dir -maxdepth 2 '(' -path './.heroku/vendor' -prune -o -name "$build_dir" ')' -o -exec rm -rf '{}' ';'
